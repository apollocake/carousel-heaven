# Name of the workflow, visible in the GitHub Actions tab
name: Deploy Dockerized App to DigitalOcean Droplet

# Controls when the workflow will run
on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the 'main' branch

# A workflow run is made up of one or more jobs.
jobs:
  build-and-deploy:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest # Use a fresh Ubuntu virtual machine hosted by GitHub

    # Permissions needed for pushing to GitHub Container Registry
    permissions:
      contents: read
      packages: write # Required for pushing Docker images to GHCR

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout repository code
      # Uses the official action to checkout your repository code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      # Authenticates with GHCR using GitHub's built-in token
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }} # Uses your GitHub username
        password: ${{ secrets.GITHUB_TOKEN }} # Automatically provided token

    - name: Build and push Docker image
      # Builds your Docker image and pushes it to GHCR
      uses: docker/build-push-action@v5
      with:
        context: . # Path to the Dockerfile's build context (usually repository root)
        push: true # Push the image to the registry
        tags: ghcr.io/${{ github.repository }}:latest # Tag the image with 'latest'
        # Example for a specific version tag based on commit SHA (more robust):
        # tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

    - name: Deploy to DigitalOcean Droplet via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Abort if any command fails
          set -e

          # Ensure Docker is running (optional, but good for robustness)
          sudo systemctl start docker || true

          # Log in to GitHub Container Registry on the Droplet
          # Pass the GHCR_PAT secret securely via stdin to avoid exposing it in logs
          echo ${{ secrets.GHCR_PAT }} | sudo docker login ghcr.io -u apollocake --password-stdin

          # Pull the latest Docker image from GitHub Container Registry
          sudo docker pull ghcr.io/${{ github.repository }}:latest

          # Stop and remove the old container (if running)
          sudo docker stop 5-page-site-template-nextjs || true # Use your actual container name
          sudo docker rm 5-page-site-template-nextjs || true # Use your actual container name
          # Run the new container, mapping ports (host port 80 to container port 3000)
          sudo docker run -d --name 5-page-site-template-nextjs -p 80:3000 ghcr.io/${{ github.repository }}:latest

          echo "Dockerized deployment completed successfully!"